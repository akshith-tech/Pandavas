  import google.generativeai as genai
import streamlit as st

# --- Page Configuration ---
st.set_page_config(
    page_title="Welcome to Study Mate",
    page_icon="✨",
    layout="centered",
    initial_sidebar_state="auto",
)

# --- Custom Styling (CSS) ---
st.markdown("""
<style>
    /* General Page Styling */
    body {
        font-family: 'Roboto', sans-serif;
        background: linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%);
        color: #333;
    }
    .main {
        background-color: #ffffffcc;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.15);
    }
    h1 {
        color: #222;
        text-align: center;
        font-weight: 900;
        font-size: 2.5rem;
        background: linear-gradient(to right, #ff416c, #ff4b2b);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }

    /* Input Box */
    .stTextInput > div > div > input {
        border: 2px solid #4CAF50;
        border-radius: 10px;
        padding: 12px;
        font-size: 16px;
        transition: all 0.3s ease-in-out;
    }
    .stTextInput > div > div > input:focus {
        border-color: #ff4b2b;
        box-shadow: 0 0 10px rgba(255, 75, 43, 0.4);
    }

    /* Generate Button */
    .stButton > button {
        background: linear-gradient(to right, #ff416c, #ff4b2b);
        color: white;
        border: none;
        padding: 14px 28px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 18px;
        margin: 10px 2px;
        cursor: pointer;
        border-radius: 30px;
        transition: all 0.3s ease-in-out;
        font-weight: bold;
        box-shadow: 0 6px 15px rgba(0,0,0,0.2);
    }
    .stButton > button:hover {
        background: linear-gradient(to right, #ff4b2b, #ff416c);
        transform: translateY(-3px) scale(1.05);
    }
    .stButton > button:active {
        transform: scale(0.97);
    }

    /* Response Area */
    .response-box {
        background: linear-gradient(135deg, #ffffff 0%, #f9f9f9 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border: 2px solid #eee;
        margin-top: 1.5rem;
        box-shadow: 0 6px 18px rgba(0,0,0,0.1);
        font-size: 1.1rem;
        line-height: 1.6;
        color: #222;
    }
</style>
""", unsafe_allow_html=True)


# --- Generative AI Configuration ---
try:
    # It's recommended to use st.secrets for API keys
    genai.configure(api_key="AIzaSyCEg9F1RhG97V0AdARCSdtwGM6jiaEW6Rk")
    model = genai.GenerativeModel('gemini-2.0-flash')
except Exception as e:
    st.error(f"Error configuring Generative AI: {e}", icon="🚨")


# --- App Layout ---
st.title("📚 Welcome to Study Mate 📚")

prompt = st.text_input("💡 Enter your prompt below:", placeholder="e.g., Explain photosynthesis in simple words")

if st.button("🚀 Generate Response"):
    if 'model' in locals() and prompt:
        with st.spinner("✨ Generating your content... Please wait..."):
            try:
                response = model.generate_content(prompt)
                st.markdown(
                    f"<div class='response-box'>{response.text}</div>",
                    unsafe_allow_html=True
                )
                print(response.text)
            except Exception as e:
                st.error(f"🔥 An error occurred: {e}")
    else:
        st.warning("⚠️ Please enter a prompt to generate content.")
import google.generativeai as genai
import streamlit as st
import fitz  # PyMuPDF for PDF text extraction
import os

# --- Page Configuration ---
st.set_page_config(
    page_title="Study Mate - PDF Q&A",
    page_icon="📘",
    layout="centered",
    initial_sidebar_state="auto",
)

# --- Custom Styling (CSS) ---
st.markdown("""
<style>
    body {
        font-family: 'Roboto', sans-serif;
        background: linear-gradient(135deg, #89f7fe 0%, #66a6ff 100%);
        color: #333;
    }
    .main {
        background-color: white;
        padding: 2rem;
        border-radius: 15px;
        box-shadow: 0 8px 20px rgba(0,0,0,0.15);
    }
    h1 {
        text-align: center;
        font-weight: 900;
        font-size: 2.5rem;
        background: linear-gradient(to right, #ff416c, #ff4b2b);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
    }
    .stButton > button {
        background: linear-gradient(to right, #ff416c, #ff4b2b);
        color: white;
        border: none;
        padding: 14px 28px;
        font-size: 18px;
        cursor: pointer;
        border-radius: 30px;
        transition: all 0.3s ease-in-out;
        font-weight: bold;
        box-shadow: 0 6px 15px rgba(0,0,0,0.2);
    }
    .stButton > button:hover {
        transform: translateY(-3px) scale(1.05);
    }
    .response-box {
        background: linear-gradient(135deg, #ffffff 0%, #f9f9f9 100%);
        padding: 1.5rem;
        border-radius: 12px;
        border: 2px solid #eee;
        margin-top: 1.5rem;
        box-shadow: 0 6px 18px rgba(0,0,0,0.1);
        font-size: 1.1rem;
        line-height: 1.6;
        color: #222;
    }
</style>
""", unsafe_allow_html=True)

# --- Generative AI Configuration ---
try:
    model = genai.GenerativeModel('gemini-2.0-flash')
    genai.configure(api_key="AIzaSyCEg9F1RhG97V0AdARCSdtwGM6jiaEW6Rk")
except Exception as e:
    st.error(f"Error configuring Generative AI: {e}", icon="🚨")


# --- PDF Text Extraction ---
def extract_text_from_pdf(uploaded_file):
    pdf_document = fitz.open(stream=uploaded_file.read(), filetype="pdf")
    text = ""
    for page in pdf_document:
        text += page.get_text()
    return text


# --- App Layout ---
st.title("📑 Study Mate - Ask Questions from PDFs📑")

uploaded_file = st.file_uploader("📂 Upload your PDF file", type=["pdf"])

pdf_text = ""
if uploaded_file is not None:
    with st.spinner("📖 Extracting text from PDF..."):
        pdf_text = extract_text_from_pdf(uploaded_file)
    st.success("✅ PDF uploaded and text extracted successfully!")


# --- Question Input ---
prompt = st.text_input("💡 Ask a question about your PDF:", placeholder="e.g., Summarize ")

# --- Generate Answer ---
if st.button("🚀 Generate Response", key="generate_response_button"):
    if 'model' in locals() and prompt:
        with st.spinner("✨ Thinking... Please wait..."):
            try:
                context = pdf_text[:15000]  # limit context for token safety
                response = model.generate_content(f"Based on this PDF content:\n\n{context}\n\nQuestion: {prompt}")
                st.markdown(f"<div class='response-box'>{response.text}</div>", unsafe_allow_html=True)
            except Exception as e:
                st.error(f"🔥 An error occurred: {e}")
    else:
        st.warning("⚠️ Please upload a PDF and enter a question.")
